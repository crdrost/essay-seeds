We start, as code often does, with a simple mathematical problem and its straightforward solution. Our mathematical problem is the idea of defining, in a very nice mathematical structure, recursion. It's worth using an example.

In mathematics you may want the factorial operator (!), defined like so: 

	n! = n * (n - 1) * ... * 2 * 1. 
	for example, 4! = 4 * 3 * 2 * 1 = 24.

This number is very important in a branch of mathematics called combinatorics: it tells you that if you have a series of 4 distinct items, then there are 24 different possible permutations of those 4 items. They are:

	abcd	abdc	acbd	acdb	adbc	adcb
	bacd	badc	bcad	bcda	bdac	bdca
	cabd	cadb	cbad	cbda	cdab	cdba
	dabc	dacb	dbac	dbca	dcab	dcba

It's worth going through the proof that these two are the same, because it's simple. Imagine that we wanted to permute 'abcde' instead of 'abcd'. We can use the above set: just make five copies, and in the n'th copy insert 'e' into all of the elements, in the n'th place. Thus the first copy will start with 'eabcd', the second copy will start with 'aebcd', and so on. This proves a *recursive relation*, namely that:

	n! = n * (n - 1)!

If you also have a starting point, like 0! = 1, then this is in fact enough to calculate factorials:

	function factorial(n) {
		return n === 0 ? 1 : n * factorial(n - 1);
	} 

This is a recursive definition which works for any positive counting number. Recursion is of course used ubiquitously throughout program design, but it's useful to see it here.

Now, there's a catch: I said that we wanted an elegant mathematical description of recursion, but the above description has something which is not elegant: it uses the name 'factorial' to define what 'factorial' means. One of the earlier mathematical systems for studying programs -- the "lambda calculus" -- had real trouble naming anything other than a function argument, much less using a function within itself. Those ideas didn't exist. 

So this isn't just a grammar-geek's problem. If you have recursion, you can do loops and so on, but how do you do recursion without some sort of cyclical naming scheme?

We can begin, at least, by wishful thinking. We can just imagine first what 
it would look like to write our recursive algorithm without being able to 
directly name the function that we're calling. What /can/ we name? We can name 
the parameters into a function. So we might try to develop something like this:

	factorial = Y( 
		function factorial_maker(recurse) {
			return function (n) {
				return (n == 0) ? 1 : n * recurse(n - 1);
			};
		}
	);

I'm naming these functions, but of course those names don't mean much in the context of the actual program. The point is that we have two objects: there is a "factorial_maker" which, if you give it a factorial function, it makes you a factorial function. And then there is some sort of external function which we call the /Y combinator/ -- this magical procedure Y will somehow construct the right input into factorial_maker() to get the factorial function as output. 

We're going to try to "peek inside" Y, by trying to massage the code we already have into the above structure. What we already have might look like this:

	factorial = (function () {
		function factorial_maker(recurse) {
			return function (n) {
				return (n == 0)? 1 : n * recurse(n - 1);
			};
		}
		// do something with factorial_maker, return it.
	}());

You see, there is an anonymous function standing for the Y combinator, and rather than naming its parameter I am just placing factorial_maker at the top of the codespace. What can we do with it? Well, it needs a function, and we've only got one function around -- namely factorial_maker -- so we try that:

	factorial = (function () {
		function factorial_maker(recurse) {
			return function (n) {
				return (n == 0)? 1 : n * recurse(n - 1);
			};
		}
		return factorial_maker(factorial_maker);
	}());

There, you see? The function receives itself as a parameter. Doesn't look so 
impossible, does it? 

Unfortunately, if you try to /run/ that code, it won't work, because that's
the wrong input function. If recurse === factorial_maker, then the internal 
call to "recurse(n - 1)" becomes "factorial_maker(5)" or so, and this makes no 
sense: factorial_maker is expecting a function, not a number, as its input 
parameter.

But we can cleverly avoid this. Instead of writing "recurse", you could write 
the phrase recurse(recurse), which, if recurse === factorial_maker, will be a 
function of n. Then everything would work out in principle:

	factorial = (function () {
		function factorial_maker(recurse) {
			return function (n) {
				return (n == 0)? 1 : n * recurse(recurse)(n - 1);
			};
		}
		return factorial_maker(factorial_maker);
	}());

What's surprising is that /this actually works/. You can paste this into a 
Javascript console and calculate factorials with it. When we call 
recurse(recurse), it generates the same factmaker(factmaker) function which 
happens to be the factorial: and thus we have factorial as a valid input into 
the function. It does not recurse infinitely, because factmaker(factmaker) 
terminates nicely when n == 0, giving a function of n. 

However, it's not fun to force everyone to write "recurse(recurse)(n)", 
instead of just "recurse(n)". There's still a problem to be solved here.

In order to do this, we must be careful indeed. You see, when recurse is a 
function of n, then factorial_maker will expect a function of n as its 
argument, rather than a function of functions. So we must wrap factorial_maker
in another function F(f), which expects F itself to be passed inside.

And then, we must wrap the f(f)(n) call in an intermediary function 
recurse(n), which will be the actual "recurse" function handed in to 
factmaker. We're doing the same steps, but we're doing them /outside/ of 
factmaker, in a new function F that /wraps/ factmaker's fundamental action.  

The end result looks like this:

	factorial = (function () {
		function factorial_maker(recurse) {
			return function (n) {
				return (n == 0)? 1 : n * recurse(n - 1);
			};
		}
		function F(f) {
			function recurse(n) {
				return f(f)(n);
			}
			return factorial_maker(recurse);
		}
		return F(F);
	}());

As promised: we have recurse(n) defined as f(f)(n); it does the actual 
recursion work, while F simply passes "recurse" into the factorial_maker and
returns the result. When you call recurse, recurse calls F(F), which provides
you with another function of n which is actually totally identical to the 
last. So if you try to run this, you'll find that it /again/ does actually 
work.

We can clean this up somewhat, since the reference to /recurse/ is only actually used once, and the arguments need not be limited to just the one argument n if we use the /arguments/ special variable and the /apply/ property of our function. The /Y combinator/ is thus:

	function Y(maker) {
		function F(f) {
			function recurse() {
				return f(f).apply(this, arguments);
			}
			return maker(recurse);
		}
		return F(F);
	}

For extra lamba calculus points, we could even avoid naming F by repeating its 
code twice, since F does not use its own name. This version avoids naming any 
sort of variable whatsoever, except for single arguments. And each function is 
exactly one statement long:


    function Y(maker) {
        return (function (f) {
            function recurse() {
                return f(f).apply(this, arguments);
            }
            return maker(recurse);
        }(function (g) {
            function recurse2() {
                return g(g).apply(this, arguments);
            }
            return maker(recurse2);
        }));
    }

This is the purest form I know of the construct known as the Y combinator. We have defined a recursive function without it making any sort of explicit reference to itself anywhere. 

Here is the most important part of this lesson -- one that I hope you keep with you throughout your coding career. *There is such a thing as code which is too smart.* You must understand this. 